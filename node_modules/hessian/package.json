{
  "name": "hessian",
  "version": "0.2.0",
  "description": "Support for the Hessian Binary Web Service protocol",
  "main": "./lib/hessian.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bramp/hessian.js.git"
  },
  "keywords": [
    "hessian",
    "caucho"
  ],
  "dependencies": {
    "assert": "~0.4",
    "util": "~0.4",
    "ref": "~0.1.3",
    "events": "~0.5.0",
    "buffer-builder": "~0.1.0",
    "expresso": "0.9.2"
  },
  "engines": {
    "node": "*"
  },
  "author": {
    "name": "Andrew Brampton",
    "url": "bramp.net"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "Hessian.js\n==========\n\nThis is an implementation of the Hessian protocol written in JavaScript for Node  \nby Andrew Brampton [http://bramp.net](bramp.net)  \nCopyright 2012-2013\n\nProtocol reference:\n-------------------\n[http://hessian.caucho.com/doc/hessian-serialization.html](http://hessian.caucho.com/doc/hessian-serialization.html)\n\nIntro\n-----\n\nReading and writing hessian is supported\nAll valid hessian can be parsed, except for XML, Ref and Remote elements.\n\nInstall\n-------\n\n```bash\nnpm install hessian\n```\n\nExample\n-------\n\nDecoding\n\n```javascript\nvar parser = new hessian.HessianParser();\n\nparser.on('call', function(call, offset) {\n\t// Will be called once for each call\n});\n\nparser.on('reply', function(reply, offset) {\n\t// Will be called once for each reply\n});\n\nparser.on('object', function(obj, offset) {\n\t// Will be called once for each object\n});\n\nparser.on('error', function(err) {\n\t// Will only be called once on first error\n});\n\n// Now begin the parsing\nparser.decode(buf);\n\n```\n\nEncoding\n\n```javascript\nvar map = { 'map' : {key: value, key2: value2} };\nvar list = { 'list' : [1, 2, 3] [, type: 'int'] };\nvar string = \"string\";\nvar int = 123;\nvar bool = true;\nvar null = null;\n\nvar buf = hessian.encode(obj);\n```\n\nTODO\n----\n\n* Finish supporting all elements\n* Add reply/fault support\n* Find a good set of unit tests\n",
  "_id": "hessian@0.2.0",
  "_from": "hessian@"
}
